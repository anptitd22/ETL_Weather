{"timestamp":"2025-07-11T19:42:50.144001","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-11T19:42:50.144953","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/main.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-11T19:42:50.702692Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:42:53.737673Z","level":"error","event":"25/07/11 19:42:53 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:42:54.094656Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:42:54.097301Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:42:54.097890Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:20.847825","level":"error","event":"Process timed out, PID: 2268","logger":"airflow.utils.timeout.TimeoutPosix"}
{"timestamp":"2025-07-11T19:43:23.552675","level":"error","event":"Failed to import: /opt/airflow/dags/main.py","logger":"airflow.models.dagbag.DagBag","error_detail":[{"exc_type":"AirflowTaskTimeout","exc_value":"DagBag import timeout for /opt/airflow/dags/main.py after 30.0s.\nPlease take a look at these docs to improve your DAG import time:\n* https://airflow.apache.org/docs/apache-airflow/3.0.0/best-practices.html#top-level-python-code\n* https://airflow.apache.org/docs/apache-airflow/3.0.0/best-practices.html#reducing-dag-complexity, PID: 2268","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagbag.py","lineno":384,"name":"parse"},{"filename":"<frozen importlib._bootstrap_external>","lineno":999,"name":"exec_module"},{"filename":"<frozen importlib._bootstrap>","lineno":488,"name":"_call_with_frames_removed"},{"filename":"/opt/airflow/dags/main.py","lineno":6,"name":"<module>"},{"filename":"/opt/airflow/dags/etl_data_weather.py","lineno":15,"name":"<module>"},{"filename":"/opt/airflow/dags/spark/build_spark.py","lineno":55,"name":"get_spark"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/sql/session.py","lineno":556,"name":"getOrCreate"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/core/context.py","lineno":523,"name":"getOrCreate"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/core/context.py","lineno":207,"name":"__init__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/core/context.py","lineno":300,"name":"_do_init"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/core/context.py","lineno":429,"name":"_initialize_context"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/java_gateway.py","lineno":1626,"name":"__call__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/java_gateway.py","lineno":1038,"name":"send_command"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/clientserver.py","lineno":535,"name":"send_command"},{"filename":"/usr/local/lib/python3.12/socket.py","lineno":720,"name":"readinto"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/timeout.py","lineno":69,"name":"handle_timeout"}]}]}
{"timestamp":"2025-07-11T19:43:26.615060","level":"info","event":"Closing down clientserver connection","logger":"py4j.clientserver"}
{"timestamp":"2025-07-11T19:43:26.617105","level":"error","event":"DAG not found during start up","dag_id":"etl_pipeline","bundle":"BundleInfo(name='dags-folder', version=None)","path":"main.py","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.575537Z","level":"error","event":"25/07/11 19:43:26 ERROR SparkContext: Error initializing SparkContext.","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.575926Z","level":"error","event":"java.lang.IllegalStateException: Shutdown hooks cannot be modified during shutdown.","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.576245Z","level":"error","event":"\tat org.apache.spark.util.SparkShutdownHookManager.add(ShutdownHookManager.scala:212)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.576547Z","level":"error","event":"\tat org.apache.spark.util.ShutdownHookManager$.addShutdownHook(ShutdownHookManager.scala:159)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.576846Z","level":"error","event":"\tat org.apache.spark.storage.DiskBlockManager.addShutdownHook(DiskBlockManager.scala:348)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.577192Z","level":"error","event":"\tat org.apache.spark.storage.DiskBlockManager.<init>(DiskBlockManager.scala:81)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.577449Z","level":"error","event":"\tat org.apache.spark.storage.BlockManager.<init>(BlockManager.scala:220)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.577712Z","level":"error","event":"\tat org.apache.spark.SparkEnv$.create(SparkEnv.scala:453)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.577955Z","level":"error","event":"\tat org.apache.spark.SparkEnv$.createDriverEnv(SparkEnv.scala:283)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.578280Z","level":"error","event":"\tat org.apache.spark.SparkContext.createSparkEnv(SparkContext.scala:294)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.578548Z","level":"error","event":"\tat org.apache.spark.SparkContext.<init>(SparkContext.scala:495)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.578801Z","level":"error","event":"\tat org.apache.spark.api.java.JavaSparkContext.<init>(JavaSparkContext.scala:59)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.579039Z","level":"error","event":"\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.579293Z","level":"error","event":"\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.579584Z","level":"error","event":"\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.579947Z","level":"error","event":"\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.580212Z","level":"error","event":"\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.580856Z","level":"error","event":"\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:247)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.581246Z","level":"error","event":"\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.581594Z","level":"error","event":"\tat py4j.Gateway.invoke(Gateway.java:238)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.581936Z","level":"error","event":"\tat py4j.commands.ConstructorCommand.invokeConstructor(ConstructorCommand.java:80)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.582197Z","level":"error","event":"\tat py4j.commands.ConstructorCommand.execute(ConstructorCommand.java:69)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.582525Z","level":"error","event":"\tat py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.582912Z","level":"error","event":"\tat py4j.ClientServerConnection.run(ClientServerConnection.java:108)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.583200Z","level":"error","event":"\tat java.base/java.lang.Thread.run(Thread.java:840)","chan":"stderr","logger":"task"}
{"timestamp":"2025-07-11T19:43:27.583679Z","level":"warning","event":"Process exited abnormally","exit_code":1,"logger":"task"}
